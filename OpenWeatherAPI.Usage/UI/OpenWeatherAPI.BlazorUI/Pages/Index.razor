@page "/"
@using OpenWeatherAPI.Domain.Base;
@using OpenWeatherAPI.Interfaces.Base.Repositories;
@inject IRepository<DataSourceInfo> _repository

<h3>Data:</h3>

<button class="btn btn-primary" @onclick="RefreshDataAsync">Reload Data</button>
<button class="btn btn-outline-primary" @onclick="RefreshDataAsync">
    <i class="fa fa-plus-circle"></i>
</button>

@if (_sources is { } sources)
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th>Description</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach(var src in sources)
            {
                <tr>
                    <td>@src.Id</td>
                    <td>@src.Name</td>
                    <td>@src.Description</td>
                    <td>
                        <button class="btn btn-outline-danger" @onclick="async () => await RemoveSource(src)">
                            <i class="fa fa-trash"></i>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p class="fa-italic">Loading....</p>
}

@code{
    private IList<DataSourceInfo>? _sources;

    protected override async Task OnInitializedAsync() => await UpdateSourceAsync();
    private async Task RefreshDataAsync() => await UpdateSourceAsync();

    private async Task UpdateSourceAsync()
    {
        Console.WriteLine("Request data...");
        _sources = (await _repository.GetAll()).ToList();
        Console.WriteLine("Complete!");
    }

    private async Task RemoveSource(DataSourceInfo source)
    {
        if (_sources is not { Count: > 0 } sources) return;

        var removed = await _repository.Delete(source);
        if (removed is not null) 
            _sources?.Remove(removed);
    }
}
