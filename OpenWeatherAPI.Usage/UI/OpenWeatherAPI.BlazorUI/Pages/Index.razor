@page "/"
@using OpenWeatherAPI.Domain.Base;
@using OpenWeatherAPI.Interfaces.Base.Repositories;
@inject IRepository<DataSourceInfo> _repository

<h3>Data:</h3>

<button class="btn btn-primary" @onclick="RefreshDataAsync">Reload Data</button>

<hr />

<EditForm Model="_createNewSourceModel" OnValidSubmit="OnSourceCreatedAsync">
    <div class="row">
        <div class="col-3">
            <p>Name: </p>
            <InputText id="new-datasource-name" @bind-Value="_createNewSourceModel.Name" />
        </div>
        <div class="col-9">
            <p>Description: </p>
            <InputText id="new-datasource-description" @bind-Value="_createNewSourceModel.Description" />
        </div>
    </div>
    <button class="btn btn-outline-primary" type="submit">Add</button>
</EditForm>

@if (_sources is { } sources)
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th>Description</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach(var src in sources)
            {
                <tr>
                    <td>@src.Id</td>
                    <td>@src.Name</td>
                    <td>@src.Description</td>
                    <td>
                        <button class="btn btn-outline-danger" @onclick="async () => await RemoveSourceAsync(src)">
                            <i class="fa fa-trash"></i>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p class="fa-italic">Loading....</p>
}

@code{
    #region [Fields]

    private IList<DataSourceInfo>? _sources;
    private DataSourceInfo _createNewSourceModel = new();

    #endregion


    protected override async Task OnInitializedAsync() => await UpdateSourceAsync();
    private async Task RefreshDataAsync() => await UpdateSourceAsync();

    // Update data
    private async Task UpdateSourceAsync()
    {
        Console.WriteLine("Request data...");
        _sources = (await _repository.GetAll()).ToList();
        Console.WriteLine("Complete!");
    }

    // Remove
    private async Task RemoveSourceAsync(DataSourceInfo source)
    {
        if (_sources is not { Count: > 0 } sources) return;

        var removed = await _repository.Delete(source);
        if (removed is not null) 
            _sources?.Remove(removed);
    }

    private async Task OnSourceCreatedAsync()
    {
        var created = await _repository.Add(_createNewSourceModel);
        if (created is null) return;

        _sources?.Add(created);
        _createNewSourceModel = new();
    }
}
